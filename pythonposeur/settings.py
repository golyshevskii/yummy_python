"""
Django settings for pythonposeur project.
Generated by 'django-admin startproject' using Django 3.2.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# путь к папке проекта, вычисляется автоматически
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hjj38fj5hz!7s594-bfx^c1=9g2afho$p6ztb(q1j+o6$d)fr2'

# SECURITY WARNING: don't run with debug turned on in production!
# если сайт работает в отладочном режиме(True), то при возникновении любой ошибки
# в коде сайта Django выводит веб-страницу с детальным описанием этой ошибки
# if the site is running in debug mode (True), then if any error occurs
# in the site code, Django displays a web page with a detailed description of this error
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# список приложений, зарегистрированных в проекте
# application definition
INSTALLED_APPS = [
    'account.apps.AccountConfig',           # приложение аккаунт
    'django.contrib.admin',                 # административный веб-сайт Django
    'django.contrib.auth',                  # подсистема разграничения доступа
    'django.contrib.contenttypes',          # хранит список всех моделей, объявленных во всех приложениях сайта
    'django.contrib.sessions',              # обрабатывает серверные сессии
    'django.contrib.messages',              # выводит всплывающие сообщения
    'django.contrib.staticfiles',           # обрабатывает статические файлы
    'playroom.apps.PlayroomConfig',         # приложение playroom
    'yummypython.apps.YummypythonConfig',   # приложение yummypython
    'django_cleanup.apps.CleanupConfig',    # приложение cleanup для удаление ненужных файлов из базы данных
    'social_django',                        # приложение social_django для авторизации через google
    'bootstrap5',                           # приложение bootstrap для адаптированной сетки страниц веб сайта
    'martor',                               # приложение markdown для формирования разметки
]

# список посредников, зарегистрированных в проекте
# это программный модуль, выполняющий предварительную обработку клиентского запроса перед передачей его
# контроллеру и окончательную обработку ответа, сгенерированного контроллером, перед его отправкой клиенту
# list of middlewares registered in the project
# this is a software module that preprocesses the client request before sending it to the controller
# and final processing of the response generated by the controller before sending it to the client
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',            # дополнительная защита сайта от сетевых атак
    'django.contrib.sessions.middleware.SessionMiddleware',     # обработка серверных ссесий на низком уровне
    'django.middleware.common.CommonMiddleware',                # предварительная обработка запроса
    'django.middleware.csrf.CsrfViewMiddleware',                # защита от межсайтовых атак при обработке данных
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # добавляет атрибут, хранящий текущего пользователя
    'django.contrib.messages.middleware.MessageMiddleware',     # обработка всплывающих сообщений на низком уровне
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # дополнительная защита сайта от сетевых атак
]

# путь к модулю, в котором записаны маршруты уровня проекта, в виде строки
# path to the module in which the project-level routes are written, as a string
ROOT_URLCONF = 'pythonposeur.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pythonposeur.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# словарь базы данных(по умулчанию sqlite3)
# database dictionary (default sqlite3)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # формат используемой базы данных; format of database
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
# код языка, на котором будут выводиться системные сообщения и страницы административного сайта, в виде строки
# language code in which system messages and pages of the administrative site will be displayed, as a string
LANGUAGE_CODE = 'en-us'

# обозначение временной зоны в виде строки
# designation of the time zone as a string
TIME_ZONE = 'UTC'

# система автоматического перевода на язык, записанный в параметре language code, после
# чего все системные сообщения и страницы административного сайта будут выводиться на этом языке
# system of automatic translation into the language written in the language code parameter, after
# all system messages and pages of the administrative site will be displayed in this language
USE_I18N = True

# числа, значения даты и времени при выводе будут форматироваться по правилам языка
# numbers, date and time values when outputting will be formatted according to the language rules
USE_L10N = True

# хранение значения даты и времени с указанием временной зоны
# storing the date and time value with the time zone
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGIN_REDIRECT_URL : Сообщает о том, на какой URL-адрес перенаправлять пользователя после входа в систему.
# LOGIN_URL : URL-адрес для перенаправления пользователя на вход (например, с помощью декоратора login_required)
# LOGOUT_URL : URL-адрес для перенаправления пользователя на выход
LOGIN_REDIRECT_URL = reverse_lazy('account:profile')
LOGIN_URL = reverse_lazy('account:login')
LOGOUT_URL = reverse_lazy('account:logout')

# маршруты хранения статических файлов(фотографий пользователей)
# paths for storing static files (user photos)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# указание модели пользователя для создания базы данных о пользователе
# specifying a user model for creating a user database
AUTH_USER_MODEL = 'account.Profile'

# авторизация пользователя относительно email или google
# user authorization relative to email or google
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'account.authentication.EmailAuthBackend',
    'social_core.backends.google.GoogleOAuth2',
]

# API настройки для google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '551266968154-3jhcll8o652706sm7vbq0su7040cdfpc.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '6wohJtKeh3dZBrIIQOQz6Nwi'
SOCIAL_AUTH_URL_NAMESPACE = 'social'

# запись сообщений в стандартный выходной файл вместо отправки их через SMTP-сервер
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# использование отладочного сервера SMTP (python -m smtpd -n -c DebuggingServer localhost:1025)
EMAIL_PORT = 1025

MARTOR_THEME = 'bootstrap'
